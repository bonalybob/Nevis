import card10Functions from '@/scripts/si/card10Functions'
import instructionSets from '@/scripts/si/instructionSets'
jest.mock('@/scripts/si/instructionSets')

test('Check Empty Punch', () => {
  expect(card10Functions.checkEmptyPunch([0xFF, 0xFF, 0xFF], 0)).toBeTruthy()
  expect(card10Functions.checkEmptyPunch([0xFF], 0)).toBeTruthy()
  expect(card10Functions.checkEmptyPunch([0x36], 0)).toBeTruthy()
  expect(card10Functions.checkEmptyPunch([0xC3], 0)).toBeTruthy()
  expect(card10Functions.checkEmptyPunch([0xEE], 0)).toBeTruthy()
  expect(card10Functions.checkEmptyPunch([0x00, 0xEE, 0xEE], 0)).toBeFalsy()
})

test('Card Type', () => {
  expect(card10Functions.cardType(7000000)).toEqual(10)
  expect(card10Functions.cardType(7000001)).toEqual(10)
  expect(card10Functions.cardType(2000000)).toEqual(8)
  expect(card10Functions.cardType(2546522)).toEqual(8)
  expect(card10Functions.cardType(2999999)).toEqual(8)
  expect(card10Functions.cardType(1000000)).toEqual(9)
  expect(card10Functions.cardType(1546522)).toEqual(9)
  expect(card10Functions.cardType(1999999)).toEqual(9)
  expect(card10Functions.cardType(4000000)).toEqual('p')
  expect(card10Functions.cardType(4546522)).toEqual('p')
  expect(card10Functions.cardType(4999999)).toEqual('p')
  expect(card10Functions.cardType(5999999)).toEqual(undefined)
})

test('Get Personal Data', () => {
  expect(card10Functions.getPersonalData([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])).toEqual(['hello world'])
  expect(card10Functions.getPersonalData([104, 101, 108, 108, 111, 59, 119, 111, 114, 108, 100])).toEqual(['hello', 'world'])
  expect(card10Functions.getPersonalData([104, 101, 108, 108, 111, 59, 119, 111, 114, 108, 100, 59, 119, 111, 114, 108, 100])).toEqual(['hello', 'world', 'world'])
  expect(card10Functions.getPersonalData([104, 101, 108, 108, 111])).toEqual(['hello'])
  expect(card10Functions.getPersonalData([119, 111, 114, 108, 100])).toEqual(['world'])
})

test('Process Punch', () => {
  expect(card10Functions.processPunch([55, 1, 98, 177])).toBe(68465)
  expect(card10Functions.processPunch([55, 3, 106, 237])).toBe(70573)
  expect(card10Functions.processPunch([55, 211, 98, 178])).toBe(68466)
  expect(card10Functions.processPunch([17, 3, 41, 74])).toBe(53770)
  expect(card10Functions.processPunch([17, 6, 42, 15])).toBe(53967)
  expect(card10Functions.processPunch([17, 231, 41, 96])).toBe(53792)
  expect(card10Functions.processPunch([17, 232, 41, 110])).toBe(53806)
  expect(card10Functions.processPunch([17, 233, 41, 120])).toBe(53816)
  expect(card10Functions.processPunch([17, 234, 41, 133])).toBe(53829)
  expect(card10Functions.processPunch([17, 235, 41, 138])).toBe(53834)
  expect(card10Functions.processPunch([17, 236, 41, 149])).toBe(53845)
  expect(card10Functions.processPunch([17, 237, 41, 163])).toBe(53859)
})

test('Get Punch Data', () => {
  expect(card10Functions.getPunchData(
    [55, 211, 98, 178, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238]
  ))
    .toEqual([{ controlCode: 211, time: 68466 }])

  expect(card10Functions.getPunchData(
    [17, 231, 41, 96, 17, 232, 41, 110, 17, 233, 41, 120, 17, 234, 41, 133, 17, 235, 41, 138, 17, 236, 41, 149, 17, 237, 41, 163, 17, 238, 41, 174, 17, 239, 41, 183, 17, 240, 41, 189, 17, 241, 41, 199, 17, 242, 41, 206, 17, 243, 41, 218, 17, 244, 41, 231, 17, 245, 41, 240, 17, 247, 41, 250, 17, 246, 42, 3, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238]))
    .toEqual([
      { controlCode: 231, time: 53792 },
      { controlCode: 232, time: 53806 },
      { controlCode: 233, time: 53816 },
      { controlCode: 234, time: 53829 },
      { controlCode: 235, time: 53834 },
      { controlCode: 236, time: 53845 },
      { controlCode: 237, time: 53859 },
      { controlCode: 238, time: 53870 },
      { controlCode: 239, time: 53879 },
      { controlCode: 240, time: 53885 },
      { controlCode: 241, time: 53895 },
      { controlCode: 242, time: 53902 },
      { controlCode: 243, time: 53914 },
      { controlCode: 244, time: 53927 },
      { controlCode: 245, time: 53936 },
      { controlCode: 247, time: 53946 },
      { controlCode: 246, time: 53955 },
    ])

  expect(card10Functions.getPunchData(

    .toEqual([])
})

test('Process Block Next', () => {
  const port = { write: jest.fn(), flush: jest.fn() }

  expect(card10Functions.processBlockNext()).toBe(undefined)
  expect(card10Functions.processBlockNext([], port)).toBe(undefined)
  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 4, 17, 231, 41, 96, 17, 232, 41, 110, 17, 233, 41, 120, 17, 234, 41, 133, 17, 235, 41, 138, 17, 236, 41, 149, 17, 237, 41, 163, 17, 238, 41, 174, 17, 239, 41, 183, 17, 240, 41, 189, 17, 241, 41, 199, 17, 242, 41, 206, 17, 243, 41, 218, 17, 244, 41, 231, 17, 245, 41, 240, 17, 247, 41, 250, 17, 246, 42, 3, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 57, 203, 3], port, {
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    }))
    .toEqual({
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
        { controlCode: 231, time: 53792 },
        { controlCode: 232, time: 53806 },
        { controlCode: 233, time: 53816 },
        { controlCode: 234, time: 53829 },
        { controlCode: 235, time: 53834 },
        { controlCode: 236, time: 53845 },
        { controlCode: 237, time: 53859 },
        { controlCode: 238, time: 53870 },
        { controlCode: 239, time: 53879 },
        { controlCode: 240, time: 53885 },
        { controlCode: 241, time: 53895 },
        { controlCode: 242, time: 53902 },
        { controlCode: 243, time: 53914 },
        { controlCode: 244, time: 53927 },
        { controlCode: 245, time: 53936 },
        { controlCode: 247, time: 53946 },
        { controlCode: 246, time: 53955 },
      ],
    })

  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 7, 17, 231, 41, 96, 17, 232, 41, 110, 17, 233, 41, 120, 17, 234, 41, 133, 17, 235, 41, 138, 17, 236, 41, 149, 17, 237, 41, 163, 17, 238, 41, 174, 17, 239, 41, 183, 17, 240, 41, 189, 17, 241, 41, 199, 17, 242, 41, 206, 17, 243, 41, 218, 17, 244, 41, 231, 17, 245, 41, 240, 17, 247, 41, 250, 17, 246, 42, 3, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 57, 203, 3], port, {
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    }))
    .toEqual({
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
        { controlCode: 231, time: 53792 },
        { controlCode: 232, time: 53806 },
        { controlCode: 233, time: 53816 },
        { controlCode: 234, time: 53829 },
        { controlCode: 235, time: 53834 },
        { controlCode: 236, time: 53845 },
        { controlCode: 237, time: 53859 },
        { controlCode: 238, time: 53870 },
        { controlCode: 239, time: 53879 },
        { controlCode: 240, time: 53885 },
        { controlCode: 241, time: 53895 },
        { controlCode: 242, time: 53902 },
        { controlCode: 243, time: 53914 },
        { controlCode: 244, time: 53927 },
        { controlCode: 245, time: 53936 },
        { controlCode: 247, time: 53946 },
        { controlCode: 246, time: 53955 },
      ],
    })

  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 1, 17, 231, 41, 96, 17, 232, 41, 110, 17, 233, 41, 120, 17, 234, 41, 133, 17, 235, 41, 138, 17, 236, 41, 149, 17, 237, 41, 163, 17, 238, 41, 174, 17, 239, 41, 183, 17, 240, 41, 189, 17, 241, 41, 199, 17, 242, 41, 206, 17, 243, 41, 218, 17, 244, 41, 231, 17, 245, 41, 240, 17, 247, 41, 250, 17, 246, 42, 3, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 57, 203, 3], port, {
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    }))
    .toEqual({
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
        { controlCode: 231, time: 53792 },
        { controlCode: 232, time: 53806 },
        { controlCode: 233, time: 53816 },
        { controlCode: 234, time: 53829 },
        { controlCode: 235, time: 53834 },
        { controlCode: 236, time: 53845 },
        { controlCode: 237, time: 53859 },
        { controlCode: 238, time: 53870 },
        { controlCode: 239, time: 53879 },
        { controlCode: 240, time: 53885 },
        { controlCode: 241, time: 53895 },
        { controlCode: 242, time: 53902 },
        { controlCode: 243, time: 53914 },
        { controlCode: 244, time: 53927 },
        { controlCode: 245, time: 53936 },
        { controlCode: 247, time: 53946 },
        { controlCode: 246, time: 53955 },
      ],
    })

  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 4, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 210, 89, 3], port, {
      siid: 9010222,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    }))
    .toEqual({
      siid: 9010222,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    })

  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 4, 238, 238, 238, 238, 238, 238, 238, 238, 55, 211, 98, 178, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 210, 89, 3], port, {
      siid: 2000000,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    }))
    .toEqual({
      siid: 2000000,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
        { controlCode: 211, time: 68466 },
      ],
    })

  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 4, 238, 238, 238, 238, 238, 238, 238, 238, 55, 211, 98, 178, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 55, 211, 98, 178, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 210, 89, 3], port, {
      siid: 4000000,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    }))
    .toEqual({
      siid: 4000000,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
        { controlCode: 211, time: 68466 },
      ],
    })

  card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 4, 17, 231, 41, 96, 17, 232, 41, 110, 17, 233, 41, 120, 17, 234, 41, 133, 17, 235, 41, 138, 17, 236, 41, 149, 17, 237, 41, 163, 17, 238, 41, 174, 17, 239, 41, 183, 17, 240, 41, 189, 17, 241, 41, 199, 17, 242, 41, 206, 17, 243, 41, 218, 17, 244, 41, 231, 17, 245, 41, 240, 17, 247, 41, 250, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 57, 203, 3], port, {
      siid: 8220201,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    })

  expect(instructionSets.card10.getData5).toHaveBeenCalledTimes(1)
  card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 5, 17, 246, 42, 3, 17, 246, 42, 3, 55, 211, 98, 178, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 55, 211, 98, 178, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 238, 238, 238, 210, 89, 3], port, {
      siid: 9010222,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    })
  expect(instructionSets.card10.getData6).toHaveBeenCalledTimes(1)
  card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 6, 17, 246, 42, 3, 17, 246, 42, 3, 55, 211, 98, 178, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 55, 211, 98, 178, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 238, 238, 238, 210, 89, 3], port, {
      siid: 9010222,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    })
  expect(instructionSets.card10.getData7).toHaveBeenCalledTimes(1)
  expect(card10Functions.processBlockNext(
    [2, 239, 131, 0, 10, 8, 17, 246, 42, 3, 17, 246, 42, 3, 55, 211, 98, 178, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 55, 211, 98, 178, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 17, 246, 42, 3, 238, 238, 238, 210, 89, 3], port, {
      siid: 9010222,
      punches: [
        { controlCode: 'S', time: 53770 },
        { controlCode: 'F', time: 53967 },
      ],
    })).toEqual(undefined)
})

test('Process Block 0', () => {
  const port = { write: jest.fn(), flush: jest.fn() }

  expect(card10Functions.processBlock0([2, 239, 131, 0, 10, 0, 83, 80, 225, 152, 234, 234, 234, 234, 55, 1, 97, 104, 55, 1, 98, 177, 55, 3, 106, 237, 0, 196, 1, 217, 15, 137, 124, 46, 11, 12, 255, 25, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 46, 117, 107, 59, 43, 52, 52, 45, 56, 55, 48, 32, 55, 54, 54, 32, 49, 55, 57, 50, 59, 80, 69, 78, 82, 73, 84, 72, 44, 32, 67, 117, 109, 98, 114, 105, 97, 59, 83, 108, 101, 97, 103, 105, 108, 108, 32, 72, 101, 97, 100, 32, 2, 177, 3], port)).toEqual({
    siid: 9010222,
    punches: [
      { controlCode: 'S', time: 68465 },
      { controlCode: 'F', time: 70573 },
    ],
    personalData: [
      'îîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîî.uk',
      '+44-870 766 1792',
      'PENRITH, Cumbria',
      'Sleagill Head',
    ],
  })

  expect(card10Functions.processBlock0([2, 239, 131, 0, 10, 0, 74, 174, 193, 155, 234, 234, 234, 234, 17, 1, 41, 64, 17, 3, 41, 74, 17, 6, 42, 15, 16, 9, 17, 20, 15, 125, 110, 41, 1, 16, 59, 14, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 187, 255, 3], port)).toEqual({
    siid: 8220201,
    punches: [
      { controlCode: 'S', time: 53770 },
      { controlCode: 'F', time: 53967 },
    ],
    personalData: [
      'îîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîî',
    ],
  })

  expect(card10Functions.processBlock0([2, 239, 131, 0, 10, 0, 74, 174, 193, 155, 234, 234, 234, 234, 17, 1, 41, 64, 17, 3, 238, 238, 17, 6, 238, 238, 16, 9, 17, 20, 15, 125, 110, 41, 2, 30, 132, 129, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 187, 255, 3], port)).toEqual({
    siid: 8220201,
    punches: [],
    personalData: [
      'îîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîî',
    ],
  })

  expect(instructionSets.card10.getData4).toHaveBeenCalledTimes(3)

  expect(card10Functions.processBlock0([2, 239, 131, 0, 10, 0, 74, 174, 193, 155, 234, 234, 234, 234, 17, 1, 41, 64, 17, 3, 238, 238, 17, 6, 238, 238, 16, 9, 17, 20, 2, 30, 132, 129, 1, 16, 59, 14, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 187, 255, 3], port)).toEqual({
    siid: 2000001,
    punches: [],
    personalData: [
      'îîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîîî',
    ],
  })

  expect(instructionSets.card10.getData1).toHaveBeenCalledTimes(1)

  expect(card10Functions.processBlock0([2, 239, 131, 0, 10, 0, 74, 174, 193, 155, 234, 234, 234, 234, 17, 1, 41, 64, 17, 3, 238, 238, 17, 6, 238, 238, 16, 9, 17, 20, 1, 15, 66, 64, 1, 16, 59, 14, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 187, 255, 3], port)).toEqual({
    siid: 1000000,
    punches: [],
    personalData: [
      'îîîîîîîîîîîîîîîîîîîî',
    ],
  })

  expect(instructionSets.card10.getData1).toHaveBeenCalledTimes(1)

  expect(card10Functions.processBlock0([2, 239, 131, 0, 10, 0, 74, 174, 193, 155, 234, 234, 234, 234, 17, 1, 41, 64, 17, 3, 238, 238, 17, 6, 238, 238, 16, 9, 17, 20, 1, 15, 66, 64, 1, 16, 59, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 2, 30, 132, 129, 238, 238, 238, 238, 238, 238, 187, 255, 3], port)).toEqual({
    siid: 1000000,
    punches: [
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
      { controlCode: 132, time: 33026 },
    ],
    personalData: [
      expect.any(String),
    ],
  })
  expect(instructionSets.card10.getData1).toHaveBeenCalledTimes(2)
})
